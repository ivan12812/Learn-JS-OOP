                            JavaScript Object Oriented Programming



PENGENALAN OBJECT ORIENTED PROGRAMMING 
    - OOP adalah sudut pandang bahasa pemrograman yang berkonsep "object".
    - Ada banyak sudut pandang bahasa pemrograman, namun OOP adalah yang sangat populer saat ini.
    - Contoh lain sudut pandang bahasa pemrogramman, yaitu :
        1. Functional Programing.
        2. Prosedural atau imperatif programming.
    - Ada beberapa istilah yang perlu dimengerti dalam OOP, yaitu : Object dan Class.

    Apa Itu Object
        - Object adalah data yang berisi field / properties / attributes dan method / function / behavior.

    Apa itu Class
        - Class adalah blueprint, prototype atau cetakan untuk membuat Object.
        - Class berisikan deklarasi semua properties dan functios yang dimiliki oleh object.
        - Setiap object selalu dibuat di Class.
        - Dan sebuh class bisa membuat Object tanpa batas.

    OOP di JavaScript
    - JavaScript sendiri sebenarnya sejak awal dibuat sebagai bahasa prosedural, bukan bahasa pemrogramman berorientasi object.
    - Oleh karna, implementasi OOP di Javascript memang tidak sedetail bahasa pemrogramman lain yang memang dari awal merupakan bahasa pemrograman OOP seperti Java atau C++. 


MEMBUAT CONSTRUCTUR FUNCTION 
    Membuat Object
        - Sebenarnya kita sudah belajar tipe data object, dengan cara membuat variable dengan tipe data object.
        - Namun pembuatan object menggunakan tipe data object, akan membuat object yang selalu unik, sedangkan dalam OOP, biasanya kita akan membuat class sebagai cetakan, sehingga bisa membuat object dengan karakteristik yang sama berkali-kali, tanpa harus mendeklarasikan object berkali-kali seperti menggunakan tipe data object.
    
    Membuat Consturctor Function 
        - Sebelum EcmaScript versi 6, pembuatan class, biasanya menggunakan function. Hal ini dikarnakan sebenarnya JavaScript bukanlah bahasa pemrograman yang fokus ke OOP.
        - Untuk membuat class di JS lama, kita bisa membuat function.
        - Function ini kita sebut dengan Constructor Function.

    Membuat Object dari Constuctor Function
        - Setelah kita membuat class, jika kita ingin membuat object dari class tersebut, kita bisa menggunakan kata kunci new, lalu diikuti dengan nama constructor function nya.


PROPERTY DI CONSTRUCTOR FUNCTION 
    - Sebenarnya setelah kita membuat object, kita bisa dengan mudah menambahkan property ke dalam object tersebut hanya dengan menggunakan nama variable nya, diikuti tanda titik dan nama property.
    - Namun jika seperti itu, alhasil, constructor function yang sudah kita buat tidak terlalu berguna, karna property nya hanya ada di object yang kita tambahkan property.
    - Untuk menambahkan property di dalam semua object yang dibuat dari constructor function, kita bisa menggunakan kata kunci this lalu diikuti dengan nama property nya.


METHOD DI CONSTRUCTOR FUNCTION 
    - Sama seperti tipe data object biasanya, kita juga bisa menambahkan method di dalam constructor function.
    - Jika kita tambahkan di constructor function, secara otomatis object yang di buat akan memiliki method tersebut.


PARAMETER DI CONSTRUCTOR FUNCTION 
    - Karna dalam JS, class adalah berbentuk fuunction, jadi secara default, function tersebut bisa memiliki parameter.
    - Constructor function sama seperti function biasanya, bisa memiliki parameter, hal ini membuat ketika kita membuat object, kita bisa mengirim lansung data lewat parameter di constructor function tersebut.


CONSTRUCTOR INHERITANCE 
    - Dalam constructor kita biasanya membuat property baik itu berisi value ataupun function.
    - Di dalam consturctor, kita bisa memanggil constructor lain, dengan begitu kita bisa mewwarisi semua property yang dibuat di constructor lain tersebut.
    - Untuk memanggil constructor lain, kita bisa menggunakan Namaconstructor.call(this, prameter).


PROTOTYPE 
    - JS sebelumnya dikenal dengan pemrogramman berbasis prototype.
    - Memang agak sedikit membingungkan, dan tidak dipungkiri, banyak sekali yang bingung dengan konsep prototype di JS.
    - Pada chapter ini, kita akan bahas tentang konsep protype.

    Protype Inheritance 
    - Saat kita membuat object dari constructor function, object tersebut disebut instance, semua property(baik itu value ataupun method), akan berada di dalam instance objectnya.
    - Saat kita membuat sebuah object instance, secara otomatis object tersebut adalah turunan dari Constructor.prototype nya.
    - Untuk mengakses protype milih sebuah instance,kita bisa menggunakan __proto__

    Menambahkan prototype ke prototype
        - Property mirip object, dimana kita bisa menambah property baik itu value ataupun method.
        - Saat kita menambah sebuah property ke prototype, secara otomatis, semua object instance yang turunan dari prototype tersebut akan memiliki property tersebut.

    Cara kerja prototype Inheritance
        - Bagaimana bisa property di prototype diakses dari object instance?
        - Ketika kita mengakses property di object instance, pertama akan di cek apakah di object tersebut terdapat property tersebut atau tidak, jika tidak, maka akan di cek ke __proto__(prototype) nya, jika masih tidak ada, akan di cek lagi di __proto__(prototype) yang lebih tinggi, begitu seterusnya, sampai berakhir di object prototype.


PROTOTYPE INHERITANCE 
    - Sekarang kita sudah tahu, bahwa prototype selalu memiliki parent, artinya dia adalah turunan, parent tertinggi adalah object prototype.
    - Pertanyaanya bagaimana jika kita ingin melakukan inheritance ke prototype lain ?
    - Hal ini juga bisa dilakukan, namun agak sedikit tricky, karna hal ini, sebenarnya untuk JS medern, tidak direkomendasikan lagi praktek OOP menggunakan Prototype, karna di ES6 sudah dikenalkan kata kunci class yang akan nanti di bahas di chapter tersendiri.


KATA KUNCI CLASS 
    Membuat Class
        - Sejak ES 6, diperkenalkan kata kunci baru, yaitu class, ini merupakan kata kuunci yang dignakan untuk membuat class di JS.
        - Dengan kata kunci class, kita tidak perlu lagi menggunakan constructor function untuk membuat class.


CONSTRUCTOR DI CLASS
    - Karena bentuk constructor function mirip dengan function, jadi kita bisa menambah parameter pada constructor function, lantas bagaimana dengan class.
    - Di class juga kita bisa menambah constructor, dimana dengan menggunakan constructor, kita juga bisa menambah parameter saat pertama kali membuat object nya.
    - Untuk membuat constructor di class, kita bisa menggunakan kata kunci constructor.


PROPERTY DI CLASS
    - Sama seperti pada constructor function, dalam class pun kita bisa menambahkan property.
    - Karna hasil akhirnya adalah sebuah object, jadi menambahkan property di class bisa juga dilakukan di instance object nya.


METHOD DI CLASS
    - Membuat method di class sebenarnya bisa dilakukan dengan cara seperti menambahkan method di constructor function.
    - Namun, hal tersebut sebenarnya menambahkan method ke dalam instance object.
    - Khusus untuk method sebaiknya kita enambahkan method ke dalam instance object.
    - Untung nya di class, ada cara mudah menambahkan method dan secara otomatis ditambahkan ke prototype.


CLASS INHERITANCE
    - Sebelumnya kita sudah tahu bahwa prototype mendukung pewarisan, walaupun agak sedikit tricky cara pembuatannya.
    - Untungnya itu diperbaiki di ES6 dengan fitur class nya.
    - Sebuah class bisa melakukan pewarisan dari class lainnya dengan menggunakan kata kunci extends.
    - Di JS, class inheritance sama seperti prototypr inhritsnce, hanya bisa memiliki satu parent class.


SUPER CONSTRUCTOR
    - Class inheritance sifatnya Prototype Inheritance.
    - Bagaimana dengan constructor inheritance? Sebenarnya constructor inheritance hanyalah melakukan eksekusi constructor lain dengan tujuan agar property di constructor lain bisa ditambahkan ke instance object ini.
    - Dalam kasus ini, jika kita ingin mencapai hasil yang sama, kita bisa menggunakan kata kunci super di dalam constructor.
    - Kata kunci super digunakan untuk memanggil constructor super class.
    - Jika di child class kita kita membuat constructor, maka kita wajib memanggil parent constructor, walaupun di parent tidak ada constructor.


SUPER METHOD
    - Selain digunakan untuk memanggil constructor milih parent class, kata kunci super juga bisa digunakan mengakses method parent class.
    - Caranya bisa menggunakan super titik nama function nya.
    - Dengan kata lain, super sebenarnya adalah reference ke parent prototype, mirip seperti __proto__.


GRETTER DAN SETTER DI CLASS
    - Class juga mendukung pembuatan getter dan setter.
    - Perlu diingat, getter dan setter ini akan berada di prototype, bukan di instance object.


CLASS FIELD 
    - Biasanya, saat kita ingin menambahkan field (property yang berisi value), kita biasanya tambahkan di constructor.
    - Namun, ada proposal di EcmaScript yang mengajukan pemmbuatan public class field ditempatkan diluar constructor, selevel dengan penempatan method.
    - Proposal ini masih belum final, namun beberapa berowser sudah mendukung nya.

    Public Class Field
        - Dalam proposal tersebut juga disebutkan bahwa EcmaScript akan mendukung acces modifier public dan private.
        - Public artinya bisa diakses dari luar class, dan private hanya bisa diakses dari dalam class saja.
        - Private class field akan kita bahas di chapter selanjutnya.
        - Untuk membuat public class field, kita bisa langsung buat nama field dengan value nya selevel dengan method.
        - Jika kita tidak memasukan value ke dalam field tersebut, artinya field tersebut memiliki value undefiend.


    Private class vield
        - Secara default, saat kita menambahkan field, maka field tersebut bisa diakses dari manapun.
        - Jika kita ingin membuat field yang bersifat private (hanya bisa diakses di dalam class), kita bisa menggunakan tanda# sebelumnya nama field nya.
        - Ini dinamakan private class field, dan hanya bisa diakses dari class saja.


PRIVATE METHOD 
    - Sama seperti field, terdapat proposal juga untuk menambahkan fitur private method di EcmaScript.
    - Dengan demikian, access modifier private juga bisa digunakan di method.
    - Caranya sama, dengan menambahkan tanda # di awal method, maka secara otomatis method tersebut adalah private.
    - Ingat fitur ini maih dalam tahapan, belum benar-benar menjadi standar EcmaScript, jadi mungkin tidak semua browser mendukung fitur ini.


OPERATOR INSTANCEOF
    - kadang ada kasus kita ingin mengecek apakah sebuah object merupakan instance dari class tertentu atau bukan.
    - Kita tidak bisa menggunakan operator typeof, karna object dari class, jika kita gunakan operator typeof, hasilnya adalah "object".
    - operator instanceof akan menghasilkan boolean, true jika benar object tersebut adalah instance object nya, atau false jika bukan.

    Operator instance di class inheritance
    -   Operator instanceof mendukung class inheritance, artinya instanceof juga bisa digunakan untuk mengecek, apakah sebuah object adalah instance dari class tertentu, atau turunan dari class tertentu? 


STATIC CLASS FIELD
    Kata Kunci Static 
        - Static adalah kata kunci yang bisa kita tambahkan sebelum field atau method, biasanya ketika kita membuat field atau method, maka secara otomatis field akan menjadi property di instance object, dan method akan menjadi function di prototype.
        - Jika kita tambahkan static, maka hal itu tidak terjadi.

        Static Class Field
            - Jika kita tambahkan static dalam class field, secara otomatis field tersebut bukan lagi milik instance object, melainkan milik class nya itu sendiri.
            - Biasanya static digunakan jika kita ingin membuat utility field atau function.
            - Cara mengakses static class field pun tidak lagi lewat object, melainkan lewat class nya.
            Static class field bisa diartikan sifatnya global, tidak peduli diakses dimana atau siapa yang mengkases, hasilnnya akan sama.


STATIC METHOD
    - Kata kunci static juga tidak hanya bisa ditambahkan di field, tapi juga di method.
    - Jika kita tambahkan di method, artinya method tersebut jadi milik class nya, bukan prototype.
    - Dan untuk mengakses method tersebut, kita juga bisa lakukan seperti mengakses static class field.


ERROR
    - Saat membuat aplikasi, sudah tentu kita tidak akan terhindar dari yanng namannya error.
    - Di JS, Error merupakan sesuatu yang sudah standar.
    - Banyak sekali class error di JS, namun semua class error di JS selalu berjuang di class Error, artinya class Error adalah superclass untuk semua jenis error di JS.
    - Conntoh class error yang terdapat di JS contohnya SyntaxError, TypeError, dan lain-lain.

    Throw Error
        - Saat kita membuat instance object dari class Error, tidak lantas otomatis terjadi error.
        - Kita perlu memberitahu program kita, bahwa kita akan mentrigger sebuah error terjadi, atau istilahnya adalah melempar error (throw error).
        - Untuk melempar error, kita bisa gunakan kata kunci throw, diikuti dengan instance object errornya.
        - Jika terjadi error, maka otomatis kode program kita akan terhenti, dan kita bisa melihat detail errornya di console di aplikasi browser kita.


ERROR HANDLING
    - Saat terjadi eror di kode program JS, Kadang kita tidak ingin program kita berhenti.
    - Di JS, kita bisa menangkap jika terjadi error.
    - Kita bisa menggunakan try catch statement untuk menagkap error.
    - Pada block try, kita akan mencoba mengakses kode program yang bisa menyebabkan error, dan jika terjadi error, block try akan berhenti dan otomatis masuk ke block catch.
    - Jika tidak terjadi error, block catch tidak akan dieksekusi.

    Kata Kunci Finally
        - Kadang kita ingin melakukan sesuatu entah itu terjadi error ataupun tidak.
        - Dalam try catch, kita bisa menambahkan block finally.
        - Block finally ini akan selalu dieksekusi setelah try catch selesai, entah terjadi error atau tidak, block finally akan selalu dieksekusi.

        Try Finally
            - Kata kunci finally juga bisa digunakan tanpa perlu menggunakan catch.
            - Biasanya ini digunakan dalam kasus tertentu.


MEMBUAT CLASS ERROR MANUAL
    - Walaupun JS sudah memiliki standard class error.
    - Namun alangkah baiknya, kita membedakan tiap jenis error.
    - Untuk membuat error sendiri secara manual sangatlah mudah, cukup membuat class turunan dari class Error.
    - Dan jangan lupa tambahkan parameter message, agar bisa dikirimkan ke parameter di constructor class error.


ITERABLE DAN ITERATOR
    - Salah satu fitur terbaru di ES6 adalah iterable.
    - Iterable adalah spesial object yang memiliki standarisasi
    - Dengan mengikuti standarisasi iterable, secara otomatis kita bisa melakukan itersasi terdapat data tersebut dengan menggunakan perulangan for...of..
    - Contohnya yang sudah mengikuti standarisasi iterable adalah string, array, object, dan lain-lain.

    Cara kerja Iterable dan Iterator 
        - Jika kita mengikuti kontrak iterable, maka object yang kita buat akan bisa dilakukan iterasi menggunakan for...of.
        - Setiap kita melakukan perulangan, object iterator akan dibuat.
        - Hal ini menjadi aman jika kita melakukan iterasi berulang-ulang, karna iterator baru akan dibuat terus menerus.


MATERI SELANJUTNYA
    - JS Standard Library
    - JS Modules
    - JS DOM 
    - JS Async
    - JS Web API 